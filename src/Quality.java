package src;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;

import com.exadel.flamingo.flex.amf.AMF0Body;
import com.exadel.flamingo.flex.amf.AMF0Header;
import com.exadel.flamingo.flex.amf.AMF0Message;
import com.exadel.flamingo.flex.messaging.amf.io.AMF0Deserializer;

import flex.messaging.io.ASObject;
import lib.MyAMF0Serializer;

public class Quality {

    private static void testSerialize() throws IOException{
        ByteArrayOutputStream ba = new ByteArrayOutputStream();
        DataOutputStream doo = new DataOutputStream(ba);
        MyAMF0Serializer serializer = new MyAMF0Serializer(doo);
        AMF0Message msg = new AMF0Message();
        int[] nb = {9389725, 9712679, 1094,10};
        AMF0Body mBody = new AMF0Body("api.tool.synthesis", "/1", nb, AMF0Body.DATA_TYPE_ARRAY);
        msg.addBody(mBody);
        msg.setVersion(3);
        serializer.serializeMessage(msg);
        
        byte[] bytes = ba.toByteArray();
        for (int i = 0; i < bytes.length; i++) {
            if (i%16==0){
                System.out.println();
            }
            System.out.printf("%02x ", bytes[i]);
        }
    }

    private static void testDeserialize() throws IOException{
        // byte[] bytes = new byte[]{00,(byte)0x03,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x12,(byte)0x61,(byte)0x70,(byte)0x69,(byte)0x2e,(byte)0x74,(byte)0x6f,(byte)0x6f,(byte)0x6c,0x2e,(byte)0x73,(byte)0x79,(byte)0x6e,(byte)0x74,(byte)0x68,(byte)0x65,(byte)0x73,(byte)0x69,(byte)0x73,(byte)0x00,(byte)0x02,(byte)0x2f,(byte)0x31,(byte)0x00,(byte)0x00,00,(byte)0x29,(byte)0x0a,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x04,(byte)0x00,(byte)0x41,(byte)0x61,(byte)0xe8,(byte)0xd3,(byte)0xa0,(byte)0x00,(byte)0x00,(byte)0x00,0x0,(byte)0x41,(byte)0x62,(byte)0x86,(byte)0x84,(byte)0xe0,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x40,(byte)0x91,(byte)0x18,(byte)0x00,(byte)0x00,(byte)0x00,0x0,(byte)0x00,(byte)0x00,(byte)0x40,(byte)0x24,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};
        byte[] bytes = new byte[]{00,(byte)0x03,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x19,(byte)0x61,(byte)0x70,(byte)0x69,(byte)0x2e,(byte)0x61,(byte)0x70,(byte)0x69,(byte)0x6f,
            (byte)0x72,(byte)0x67,(byte)0x61,(byte)0x6e,(byte)0x69,(byte)0x73,(byte)0x6d,(byte)0x2e,(byte)0x71,(byte)0x75,(byte)0x61,(byte)0x6c,(byte)0x69,(byte)0x74,(byte)0x79,(byte)0x55,
            (byte)0x70,(byte)0x00,(byte)0x02,(byte)0x2f,(byte)0x31,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x0e,(byte)0x0a,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x41,
            (byte)0x62,(byte)0x86,(byte)0x84,(byte)0xe0,(byte)0x00,(byte)0x00,(byte)0x00};
        /*byte[] bytes = new byte[]{
            00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x12,(byte)0x41,(byte)0x70,(byte)0x70,(byte)0x65,(byte)0x6e,(byte)0x64,(byte)0x54,(byte)0x6f,(byte)0x47,(byte)0x61,
(byte)0x74,(byte)0x65,(byte)0x77,(byte)0x61,(byte)0x79,(byte)0x55,(byte)0x72,(byte)0x6c,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x28,(byte)0x02,(byte)0x00,(byte)0x25,
(byte)0x3f,(byte)0x50,(byte)0x48,(byte)0x50,(byte)0x53,(byte)0x45,(byte)0x53,(byte)0x53,(byte)0x49,(byte)0x44,(byte)0x3d,(byte)0x73,(byte)0x39,(byte)0x63,(byte)0x68,(byte)0x75,
(byte)0x68,(byte)0x38,(byte)0x37,(byte)0x36,(byte)0x66,(byte)0x71,(byte)0x35,(byte)0x6c,(byte)0x64,(byte)0x6f,(byte)0x31,(byte)0x39,(byte)0x68,(byte)0x6e,(byte)0x67,(byte)0x75,
(byte)0x66,(byte)0x6e,(byte)0x61,(byte)0x68,(byte)0x32,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x0b,(byte)0x2f,(byte)0x31,(byte)0x2f,(byte)0x6f,(byte)0x6e,(byte)0x52,(byte)0x65,
(byte)0x73,(byte)0x75,(byte)0x6c,(byte)0x74,(byte)0x00,(byte)0x04,(byte)0x6e,(byte)0x75,(byte)0x6c,(byte)0x6c,(byte)0x00,(byte)0x00,(byte)0x03,(byte)0x3b,(byte)0x10,(byte)0x00,
(byte)0x2c,(byte)0x64,(byte)0x61,(byte)0x74,(byte)0x61,(byte)0x2e,(byte)0x77,(byte)0x65,(byte)0x62,(byte)0x2e,(byte)0x70,(byte)0x76,(byte)0x7a,(byte)0x5f,(byte)0x73,(byte)0x31,
(byte)0x2e,(byte)0x61,(byte)0x70,(byte)0x70,(byte)0x2e,(byte)0x73,(byte)0x65,(byte)0x72,(byte)0x76,(byte)0x69,(byte)0x63,(byte)0x65,(byte)0x73,(byte)0x2e,(byte)0x63,(byte)0x6c,
(byte)0x69,(byte)0x65,(byte)0x6e,(byte)0x74,(byte)0x2e,(byte)0x6f,(byte)0x72,(byte)0x67,(byte)0x61,(byte)0x6e,(byte)0x69,(byte)0x73,(byte)0x6d,(byte)0x00,(byte)0x05,(byte)0x67,
(byte)0x72,(byte)0x61,(byte)0x64,(byte)0x65,(byte)0x02,(byte)0x00,(byte)0x03,(byte)0x33,(byte)0x37,(byte)0x36,(byte)0x00,(byte)0x06,(byte)0x61,(byte)0x74,(byte)0x74,(byte)0x61,
(byte)0x63,(byte)0x6b,(byte)0x02,(byte)0x00,(byte)0x06,(byte)0x36,(byte)0x30,(byte)0x30,(byte)0x39,(byte)0x38,(byte)0x36,(byte)0x00,(byte)0x05,(byte)0x73,(byte)0x70,(byte)0x65,
(byte)0x65,(byte)0x64,(byte)0x02,(byte)0x00,(byte)0x03,(byte)0x35,(byte)0x36,(byte)0x32,(byte)0x00,(byte)0x0a,(byte)0x73,(byte)0x65,(byte)0x6c,(byte)0x6c,(byte)0x5f,(byte)0x70,
(byte)0x72,(byte)0x69,(byte)0x63,(byte)0x65,(byte)0x02,(byte)0x00,(byte)0x06,(byte)0x33,(byte)0x36,(byte)0x30,(byte)0x30,(byte)0x30,(byte)0x30,(byte)0x00,(byte)0x03,(byte)0x65,
(byte)0x78,(byte)0x70,(byte)0x02,(byte)0x00,(byte)0x0b,(byte)0x31,(byte)0x31,(byte)0x35,(byte)0x31,(byte)0x34,(byte)0x32,(byte)0x37,(byte)0x32,(byte)0x37,(byte)0x36,(byte)0x36,
(byte)0x00,(byte)0x07,(byte)0x65,(byte)0x78,(byte)0x70,(byte)0x5f,(byte)0x6d,(byte)0x61,(byte)0x78,(byte)0x02,(byte)0x00,(byte)0x0b,(byte)0x31,(byte)0x31,(byte)0x35,(byte)0x34,
(byte)0x34,(byte)0x30,(byte)0x38,(byte)0x31,(byte)0x33,(byte)0x30,(byte)0x36,(byte)0x00,(byte)0x07,(byte)0x65,(byte)0x78,(byte)0x70,(byte)0x5f,(byte)0x6d,(byte)0x69,(byte)0x6e,
(byte)0x02,(byte)0x00,(byte)0x0b,(byte)0x31,(byte)0x31,(byte)0x30,(byte)0x38,(byte)0x33,(byte)0x33,(byte)0x38,(byte)0x34,(byte)0x30,(byte)0x34,(byte)0x38,(byte)0x00,(byte)0x08,
(byte)0x67,(byte)0x61,(byte)0x69,(byte)0x6e,(byte)0x54,(byte)0x69,(byte)0x6d,(byte)0x65,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x08,(byte)0x67,(byte)0x61,(byte)0x72,(byte)0x64,(byte)0x65,(byte)0x6e,(byte)0x49,(byte)0x64,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x0a,(byte)0x67,(byte)0x61,(byte)0x72,(byte)0x64,(byte)0x65,(byte)0x6e,(byte)0x54,(byte)0x79,(byte)0x70,(byte)0x65,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x02,(byte)0x68,(byte)0x70,(byte)0x02,(byte)0x00,(byte)0x07,
(byte)0x33,(byte)0x34,(byte)0x34,(byte)0x32,(byte)0x30,(byte)0x31,(byte)0x31,(byte)0x00,(byte)0x06,(byte)0x68,(byte)0x70,(byte)0x5f,(byte)0x6d,(byte)0x61,(byte)0x78,(byte)0x02,
(byte)0x00,(byte)0x07,(byte)0x33,(byte)0x36,(byte)0x30,(byte)0x35,(byte)0x39,(byte)0x31,(byte)0x36,(byte)0x00,(byte)0x02,(byte)0x69,(byte)0x64,(byte)0x02,(byte)0x00,(byte)0x07,
(byte)0x39,(byte)0x37,(byte)0x31,(byte)0x32,(byte)0x36,(byte)0x37,(byte)0x39,(byte)0x00,(byte)0x07,(byte)0x69,(byte)0x73,(byte)0x53,(byte)0x74,(byte)0x65,(byte)0x61,(byte)0x6c,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x04,(byte)0x6d,(byte)0x69,(byte)0x73,(byte)0x73,(byte)0x02,
(byte)0x00,(byte)0x06,(byte)0x35,(byte)0x39,(byte)0x39,(byte)0x33,(byte)0x34,(byte)0x39,(byte)0x00,(byte)0x08,(byte)0x6e,(byte)0x65,(byte)0x78,(byte)0x74,(byte)0x54,(byte)0x79,
(byte)0x70,(byte)0x65,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x07,(byte)0x6f,(byte)0x72,(byte)0x64,
(byte)0x65,(byte)0x72,(byte)0x49,(byte)0x64,(byte)0x02,(byte)0x00,(byte)0x03,(byte)0x32,(byte)0x37,(byte)0x35,(byte)0x00,(byte)0x05,(byte)0x6f,(byte)0x77,(byte)0x6e,(byte)0x65,
(byte)0x72,(byte)0x02,(byte)0x00,(byte)0x09,(byte)0x61,(byte)0x61,(byte)0x61,(byte)0x61,(byte)0x61,(byte)0x61,(byte)0x61,(byte)0x61,(byte)0x62,(byte)0x00,(byte)0x09,(byte)0x70,
(byte)0x72,(byte)0x65,(byte)0x63,(byte)0x69,(byte)0x73,(byte)0x69,(byte)0x6f,(byte)0x6e,(byte)0x02,(byte)0x00,(byte)0x06,(byte)0x35,(byte)0x39,(byte)0x39,(byte)0x33,(byte)0x34,
(byte)0x39,(byte)0x00,(byte)0x0b,(byte)0x70,(byte)0x75,(byte)0x6c,(byte)0x6c,(byte)0x75,(byte)0x6c,(byte)0x61,(byte)0x74,(byte)0x69,(byte)0x6f,(byte)0x6e,(byte)0x00,(byte)0x40,
(byte)0x7e,(byte)0x30,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x0c,(byte)0x71,(byte)0x75,(byte)0x61,(byte)0x6c,(byte)0x69,(byte)0x74,(byte)0x79,
(byte)0x5f,(byte)0x6e,(byte)0x61,(byte)0x6d,(byte)0x65,(byte)0x02,(byte)0x00,(byte)0x06,(byte)0xe4,(byte)0xbc,(byte)0x98,(byte)0xe7,(byte)0xa7,(byte)0x80,(byte)0x00,(byte)0x06,
(byte)0x73,(byte)0x6b,(byte)0x69,(byte)0x6c,(byte)0x6c,(byte)0x73,(byte)0x0a,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x03,(byte)0x00,(byte)0x02,(byte)0x69,(byte)0x64,
(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x31,(byte)0x00,(byte)0x04,(byte)0x6e,(byte)0x61,(byte)0x6d,(byte)0x65,(byte)0x02,(byte)0x00,(byte)0x06,(byte)0xe5,(byte)0x85,(byte)0x89,
(byte)0xe5,(byte)0xbc,(byte)0xb9,(byte)0x00,(byte)0x06,(byte)0x62,(byte)0x61,(byte)0x74,(byte)0x74,(byte)0x65,(byte)0x72,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x05,(byte)0x67,(byte)0x72,(byte)0x61,(byte)0x64,(byte)0x65,(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x31,(byte)0x00,
(byte)0x0d,(byte)0x6f,(byte)0x72,(byte)0x67,(byte)0x61,(byte)0x6e,(byte)0x69,(byte)0x73,(byte)0x6d,(byte)0x5f,(byte)0x61,(byte)0x74,(byte)0x74,(byte)0x72,(byte)0x02,(byte)0x00,
(byte)0x01,(byte)0x31,(byte)0x00,(byte)0x00,(byte)0x09,(byte)0x00,(byte)0x08,(byte)0x74,(byte)0x79,(byte)0x70,(byte)0x65,(byte)0x54,(byte)0x69,(byte)0x6d,(byte)0x65,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x78,(byte)0x00,(byte)0xbf,(byte)0xf0,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x79,(byte)0x00,(byte)0xbf,(byte)0xf0,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x08,(byte)0x6e,(byte)0x65,(byte)0x77,(byte)0x5f,(byte)0x6d,(byte)0x69,(byte)0x73,(byte)0x73,(byte)0x02,(byte)0x00,(byte)0x06,(byte)0x33,(byte)0x39,(byte)0x39,
(byte)0x35,(byte)0x36,(byte)0x36,(byte)0x00,(byte)0x0d,(byte)0x6e,(byte)0x65,(byte)0x77,(byte)0x5f,(byte)0x70,(byte)0x72,(byte)0x65,(byte)0x63,(byte)0x69,(byte)0x73,(byte)0x69,
(byte)0x6f,(byte)0x6e,(byte)0x02,(byte)0x00,(byte)0x07,(byte)0x31,(byte)0x38,(byte)0x36,(byte)0x36,(byte)0x36,(byte)0x34,(byte)0x39,(byte)0x00,(byte)0x08,(byte)0x66,(byte)0x69,
(byte)0x67,(byte)0x68,(byte)0x74,(byte)0x69,(byte)0x6e,(byte)0x67,(byte)0x02,(byte)0x00,(byte)0x06,(byte)0x33,(byte)0x34,(byte)0x33,(byte)0x30,(byte)0x30,(byte)0x34,(byte)0x00,
(byte)0x03,(byte)0x73,(byte)0x73,(byte)0x6b,(byte)0x0a,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x07,(byte)0x74,(byte)0x61,(byte)0x6c,(byte)0x5f,(byte)0x61,
(byte)0x64,(byte)0x64,(byte)0x03,(byte)0x00,(byte)0x02,(byte)0x68,(byte)0x70,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x04,(byte)0x6d,(byte)0x69,(byte)0x73,(byte)0x73,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x06,(byte)0x61,(byte)0x74,(byte)0x74,(byte)0x61,(byte)0x63,(byte)0x6b,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x09,(byte)0x70,(byte)0x72,(byte)0x65,(byte)0x63,(byte)0x69,(byte)0x73,(byte)0x69,(byte)0x6f,(byte)0x6e,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x05,(byte)0x73,(byte)0x70,(byte)0x65,(byte)0x65,(byte)0x64,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x09,(byte)0x00,(byte)0x08,(byte)0x73,(byte)0x6f,(byte)0x75,(byte)0x6c,(byte)0x5f,(byte)0x61,(byte)0x64,
(byte)0x64,(byte)0x03,(byte)0x00,(byte)0x02,(byte)0x68,(byte)0x70,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x04,(byte)0x6d,(byte)0x69,(byte)0x73,(byte)0x73,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x06,
(byte)0x61,(byte)0x74,(byte)0x74,(byte)0x61,(byte)0x63,(byte)0x6b,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x09,(byte)0x70,(byte)0x72,(byte)0x65,(byte)0x63,(byte)0x69,(byte)0x73,(byte)0x69,(byte)0x6f,(byte)0x6e,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x05,(byte)0x73,(byte)0x70,(byte)0x65,(byte)0x65,(byte)0x64,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x09,(byte)0x00,(byte)0x00,(byte)0x09
        };
        */
        ByteArrayInputStream bArrayInputStream = new ByteArrayInputStream(bytes);
        DataInputStream di = new DataInputStream(bArrayInputStream);
        
        AMF0Deserializer deserializer = new AMF0Deserializer(di);
        AMF0Message message = deserializer.getAMFMessage();
        message.getBody(0).getValue();
        System.out.println(message.toString());
    }
    
    private static void printBytes(byte[] bytes){
        for (int i = 0; i < bytes.length; i++) {
            if (i%16==0){
                System.out.println();
            }
            System.out.printf("%02x ", bytes[i]);
        }
    }

    public static byte[] getQualityUpAmf(int plantId) throws IOException{
        ByteArrayOutputStream ba = new ByteArrayOutputStream();
        DataOutputStream doo = new DataOutputStream(ba);
        MyAMF0Serializer serializer = new MyAMF0Serializer(doo);
        int[] value = {plantId};
        AMF0Body mBody = new AMF0Body("api.apiorganism.qualityUp", "/1", value, AMF0Body.DATA_TYPE_ARRAY);
        AMF0Message msg = new AMF0Message();
        msg.addBody(mBody);
        msg.setVersion(3);
        serializer.serializeMessage(msg);
        
        return ba.toByteArray();
        
    }
    
    /** @return new quality name */
    public static String resolveResponseAmf(byte[] bytes)throws IOException{
        ByteArrayInputStream bArrayInputStream = new ByteArrayInputStream(bytes);
        DataInputStream di = new DataInputStream(bArrayInputStream);
        
        AMF0Deserializer deserializer = new AMF0Deserializer(di);
        AMF0Message message = deserializer.getAMFMessage();
        ASObject value = (ASObject) message.getBody(0).getValue();
        if (value.containsKey("quality_name")) {
            return (String) value.get("quality_name");
        } 
        else 
            return null;
    }

    public static SimpleEntry<Integer, String> qualityUp(int plantId, String goal, int maximum) throws IOException{
        String now_quality="";
        int total_use = 0;
        byte[] body = getQualityUpAmf(plantId);
        while (!now_quality.equals(goal) && total_use < maximum) {
            byte[] resp = Request.sendPostAmf(body);
            try {
                if (resp.length == 2441){
                    System.out.printf("len 2441;\n");
                    Thread.sleep(20000);
                }else{
                    total_use++;
                    now_quality = resolveResponseAmf(resp);
                    System.out.printf("used: %d; curr: %s;\n", total_use, now_quality);
                    Thread.sleep(500);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
                break;
            }
        }

        return new SimpleEntry<Integer,String>(total_use, now_quality);
    }

    public static SimpleEntry<Integer, String> qualityUp(int plantId, int maximum) throws IOException{
        String now_quality="";
        int total_use = 0;
        byte[] body = getQualityUpAmf(plantId);
        while (total_use < maximum) {
            byte[] resp = Request.sendPostAmf(body);
            try {
                if (resp.length == 2441){
                    System.out.printf("len 2441;\n");
                    Thread.sleep(20000);
                }else{
                    total_use++;
                    now_quality = resolveResponseAmf(resp);
                    System.out.printf("used: %d; curr: %s;\n", total_use, now_quality);
                    Thread.sleep(500);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
                break;
            }
            
        }

        return new SimpleEntry<Integer,String>(total_use, now_quality);
    }

    
    public static void main(String[] args) throws IOException{
        // System.out.println(args[0]);
        // return;
        if (args.length == 3 || args.length == 4){
            if (args[0].equals("goal")){
                int plantId = Integer.parseInt(args[1]);
                String goalQuality = args[2];
                int maximum = Integer.MAX_VALUE;
                if (args.length == 4){
                    maximum = Integer.parseInt(args[3]);
                }
                SimpleEntry<Integer, String> res = qualityUp(plantId, goalQuality, maximum);
                System.out.printf("plant %d: %d books --> %s.\n", plantId, res.getKey(), res.getValue());
                return;
            }else if (args[0].equals("count") && args.length == 3){
                int plantId = Integer.parseInt(args[1]);
                int maximum = Integer.parseInt(args[2]);

                SimpleEntry<Integer, String> res = qualityUp(plantId,  maximum);
                System.out.printf("plant %d: %d books --> %s.\n", plantId, res.getKey(), res.getValue());
                return;
            }
        }
        System.out.println("args: goal plantid quality_name [max_usage]\n");
        System.out.println("or  : count plantid maximum\n");
    }
}
